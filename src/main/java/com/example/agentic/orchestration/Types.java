/* 
* Copyright 2024 - 2024 the original author or authors.
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
* https://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package com.example.agentic.orchestration;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Christian Tzolov
 */
public class Types {

	/**
	 * An individual task that can be accomplished by an Agent
	 */
	public record AgentTask(String description, String agent) {
	}

	/**
	 * A step containing independent tasks that can be executed in parallel
	 */
	public record Step(String description, List<AgentTask> tasks) {

		public Step() {
			this("", new ArrayList<>());
		}

		// Since records are immutable, provide a method to create a new instance with
		// added task
		public Step withAddedTask(AgentTask task) {
			List<AgentTask> newTasks = new ArrayList<>(tasks);
			newTasks.add(task);
			return new Step(description, newTasks);
		}
	}

	/**
	 * Plan generated by the orchestrator planner
	 */
	public record Plan(List<Step> steps, boolean isComplete) {
		public Plan {
			if (steps == null) {
				steps = new ArrayList<>();
			}
		}

		public Plan() {
			this(new ArrayList<>(), false);
		}

		// Since records are immutable, provide a method to create a new instance with
		// added step
		public Plan withAddedStep(Step step) {
			List<Step> newSteps = new ArrayList<>(steps);
			newSteps.add(step);
			return new Plan(newSteps, isComplete);
		}

		// Method to create a completed version of this plan
		public Plan withCompletion(boolean complete) {
			return new Plan(steps, complete);
		}
	}

	/**
	 * An individual task with its result
	 */
	public record TaskWithResult(String description, String result) {
		public TaskWithResult {
			if (description == null) {
				description = "";
			}
			if (result == null) {
				result = "Task completed";
			}
		}

		public TaskWithResult(String description) {
			this(description, "Task completed");
		}

		public TaskWithResult() {
			this("", "Task completed");
		}
	}

	/**
	 * Result of executing a step
	 */
	public record StepResult(Step step, List<TaskWithResult> taskResults, String result) {
		public StepResult {
			if (step == null) {
				step = new Step();
			}
			if (taskResults == null) {
				taskResults = new ArrayList<>();
			}
			if (result == null) {
				result = "Step completed";
			}
		}

		public StepResult() {
			this(new Step(), new ArrayList<>(), "Step completed");
		}

		public StepResult(Step step) {
			this(step, new ArrayList<>(), "Step completed");
		}

		// Since records are immutable, provide a method to create a new instance with
		// added task result
		public StepResult withAddedTaskResult(TaskWithResult taskResult) {
			List<TaskWithResult> newTaskResults = new ArrayList<>(taskResults);
			newTaskResults.add(taskResult);
			return new StepResult(step, newTaskResults, result);
		}

		public StepResult withResult(String newResult) {
			return new StepResult(step, taskResults, newResult);
		}
	}

	/**
	 * Results of executing a plan
	 */
	public record PlanResult(
			String objective,
			Plan plan,
			List<StepResult> stepResults,
			boolean isComplete,
			String result) {

		public PlanResult {
			if (objective == null) {
				objective = "";
			}
			if (stepResults == null) {
				stepResults = new ArrayList<>();
			}
		}

		public PlanResult(String objective) {
			this(objective, null, new ArrayList<>(), false, null);
		}

		// Since records are immutable, provide a method to create a new instance with
		// added step result
		public PlanResult withAddedStepResult(StepResult stepResult) {
			List<StepResult> newStepResults = new ArrayList<>(stepResults);
			newStepResults.add(stepResult);
			return new PlanResult(objective, plan, newStepResults, isComplete, result);
		}

		// Method to create a completed version of this plan result
		public PlanResult withCompletion(boolean complete) {
			return new PlanResult(objective, plan, stepResults, complete, result);
		}

		public PlanResult withFinalResult(String finalResult) {
			return new PlanResult(objective, plan, stepResults, isComplete, finalResult);
		}

		// Method to set the plan
		public PlanResult withPlan(Plan newPlan) {
			return new PlanResult(objective, newPlan, stepResults, isComplete, result);
		}
	}
}
